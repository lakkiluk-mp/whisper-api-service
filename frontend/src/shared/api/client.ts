import axios, { AxiosError, AxiosResponse, InternalAxiosRequestConfig } from "axios";

import { apiConfig, isDevelopment } from "../../config";

export const apiClient = axios.create(apiConfig);

// Request interceptor –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ dev —Ä–µ–∂–∏–º–µ
apiClient.interceptors.request.use(
  (config: InternalAxiosRequestConfig) => {
    if (isDevelopment) {
      console.log("üöÄ API Request:", {
        method: config.method?.toUpperCase(),
        url: config.url,
        baseURL: config.baseURL,
        data: config.data
      });
    }
    return config;
  },
  (error: AxiosError) => {
    if (isDevelopment) {
      console.error("‚ùå Request Error:", error);
    }
    return Promise.reject(error);
  }
);

// Response interceptor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
apiClient.interceptors.response.use(
  (response: AxiosResponse) => {
    if (isDevelopment) {
      console.log("‚úÖ API Response:", {
        status: response.status,
        url: response.config.url,
        data: response.data
      });
    }
    return response;
  },
  (error: AxiosError) => {
    if (isDevelopment) {
      console.error("‚ùå Response Error:", {
        status: error.response?.status,
        url: error.config?.url,
        message: error.message,
        data: error.response?.data
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
    if (error.code === "ECONNABORTED") {
      console.error("–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞");
    }

    if (!error.response) {
      console.error("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É");
    }

    return Promise.reject(error);
  }
);

export default apiClient;
